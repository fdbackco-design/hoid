## 패키지 매니저: pnpm 사용
- **모든 패키지 설치 및 관리는 pnpm을 사용하세요.**

---

## Next.js 개발: Route Handler 우선 사용
- **모든 API 엔드포인트는 Route Handler를 사용하여 구현하세요.**
- **데이터베이스 작업, 외부 API 호출, 인증 등 복잡한 서버 작업은 반드시 Route Handler를 사용하세요.**
- **Server Action은 단순 폼 제출 또는 간단한 데이터 처리에만 사용하세요.**

---

## ORM: Drizzle 사용
- **데이터베이스 작업을 위해 ORM으로 Drizzle을 사용하세요.**
- **Drizzle을 사용하여 데이터베이스 모델을 정의하고, CRUD 작업을 구현하세요.**

---

## Next.js 라우팅: App Router 사용
- **프로젝트 내 라우팅은 Pages Router 대신 App Router를 사용하세요.**

---

## 컴포넌트 생성: ShadCN 우선 사용
- **모든 UI 컴포넌트는 ShadCN을 사용하여 생성하세요.**
- ShadCN 컴포넌트 생성 CLI 명령어는 `pnpm dlx shadcn@latest add <component-name>` 입니다.
- ShadCN 컴포넌트는 components 폴더 내에 컴포넌트를 생성하고, components 폴더는 app 폴더 밖에 위치하여 하나의 폴더에서 일괄 관리합니다.

---

## TypeScript 사용: TS 사용 권장
- **프로젝트 전반에 TypeScript를 사용하세요.**
- **타입 안정성을 위해 모든 컴포넌트와 서버 로직에 TypeScript를 적용하세요.**

---

## TypeScript 인터페이스 정의 규칙: 'I' 접두사 사용
- **인터페이스 정의 시 이름 앞에 'I'를 접두사로 추가하세요.**
- 예시:
  ```typescript
  export interface IComment {
      id: string
      text: string
      author: string
  }
```

---

## Git 커밋 메세지 작성 규칙
**포멧 : **
```plaintext
<type>: <subject>

<body>
```

**커밋 타입(type)**
- feat: 새로운 기능 추가
- fix: 버그 수정
- docs: 문서 수정
- refactor: 코드 리팩토링
- style: 스타일 변경
- test: 테스트 코드 추가
- chore: 기타 작업

** 제목(subject) **
- 변경 사항에 대한 간략한 설명
- 50자 이하로 작성
- 마침표 포함하지 않음
- 현재 시점에서 완료된 작업에 대한 설명

** 본문(body) **
- 변경 사항에 대한 자세한 설명
- 커밋 메세지 작성 시 주요 변경 사항을 간략하게 설명
- 어떻게 보다는 무엇을, 왜 변경했는지 설명
- 여러 줄의 메세지를 작성할 땐 "-"로 구분

** 예시 **
```plaintext
feat: 새로운 기능 추가

- 새로운 기능 추가
- 기존 기능 개선
- 버그 수정
```